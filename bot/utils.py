import json

USERS_FILE = '../data/jsons/users.json'
STUDENT_FILE = '../data/jsons/students.json'


def load_json(file: str) -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .json

    :param file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    :return: –î–∞–Ω–Ω—ã–µ –∏–∑ .json –≤ –≤–∏–¥–µ dict
    """
    with open(file, 'r') as f:
        return json.load(f)


def save_json(data, file: str) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ .json

    :param data: –î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    :param file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    :return:
    """
    with open(file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


def set_student_id(user_id: int, student_id: int) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç –ø–∞—Ä—É user_id: student_id –≤ —Ñ–∞–π–ª–µ users.json

    :param user_id: Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º
    :param student_id: –ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞
    :return:
    """
    if not check_if_student_exists(student_id):
        return
    user_data = load_json(USERS_FILE)
    user_data['user_student'][str(user_id)] = str(student_id)
    save_json(user_data, USERS_FILE)


def delete_student_id(user_id: int) -> int | None:
    """
    –£–¥–∞–ª—è–µ—Ç –ø–∞—Ä—É user_id: student_id –≤ —Ñ–∞–π–ª–µ users.json

    :param user_id:
    :return:
    """
    user_data = load_json(USERS_FILE)
    if str(user_id) not in user_data['user_student'].keys():
        return None
    student_id = user_data['user_student'].pop(str(user_id))
    save_json(user_data, USERS_FILE)
    return student_id


def add_new_user(user_id: int) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª users.json

    :param user_id:
    :return:
    """
    user_data = load_json(USERS_FILE)
    if user_id not in user_data['users']:
        user_data['users'].append(user_id)
        save_json(user_data, USERS_FILE)


def check_if_student_exists(student_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Å—Ç—É–¥–µ–Ω—Ç –≤–æ–æ–±—â–µ

    :param student_id:
    :return:
    """
    data = load_json(STUDENT_FILE)
    return str(student_id) in list(data.keys())


def check_if_registered(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    :param user_id:
    :return:
    """
    data = load_json(USERS_FILE)
    return str(user_id) in list(data['user_student'].keys())


def get_student_marks_by_user_id(user_id: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è Telegram (HTML-—Ä–∞–∑–º–µ—Ç–∫–∞)

    :param user_id: Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
    :return: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ string
    """
    student_id = load_json(USERS_FILE)['user_student'][str(user_id)]
    student_marks = load_json(STUDENT_FILE)[student_id]

    result_lines = ['<b>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:</b>']
    for subject, mark in student_marks.items():
        display_mark = ''
        if subject == '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ':
            continue

        is_starred = '*' in str(mark)
        mark_clean = str(mark).replace('*', '').replace('/', '').rstrip()

        if isinstance(mark, str) and mark_clean.lower() in ['–Ω–µ–∑–∞—á', '–Ω–µ–∑–∞—á–µ—Ç', '–Ω–µ –∑–∞—á—Ç–µ–Ω–æ']:
            display_mark = '‚ùå'
        elif isinstance(mark, str) and mark_clean.lower() in ['–∑–∞—á', '–∑–∞—á—Ç–µ–Ω–æ']:
            display_mark = '‚úÖ'
        elif isinstance(mark, str) and mark_clean.lower() in ['–Ω–µ—è–≤', '–Ω–µ—è–≤–∫–∞']:
            display_mark = '–Ω–µ—è–≤–∫–∞'
        elif mark_clean.isdigit():
            display_mark = mark_clean
        elif display_mark:
            display_mark = mark_clean

        display_mark += '*' if is_starred else ''

        # –ö–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ <code>
        result_lines.append(f'<code>{subject[:28]:28}: {display_mark}</code>')

    note = student_marks.get('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ', '').strip() if type(student_marks.get('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ', '')) == str else ''
    if note:
        result_lines.append(f'\n<b>üìå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> <i>{note}</i>')

    return '\n'.join(result_lines)
