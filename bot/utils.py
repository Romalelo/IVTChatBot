import json
from config import DataFiles
from typing import Literal


def load_json(file: str) -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .json

    :param file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    :return: –î–∞–Ω–Ω—ã–µ –∏–∑ .json –≤ –≤–∏–¥–µ dict
    """
    with open(file, 'r') as f:
        return json.load(f)


def save_json(data, file: str) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ .json

    :param data: –î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    :param file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    :return:
    """
    with open(file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


def set_student_id(user_id: int, student_id: int) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç –ø–∞—Ä—É user_id: student_id –≤ —Ñ–∞–π–ª–µ users.json

    :param user_id: Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º
    :param student_id: –ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞
    :return:
    """
    if not check_if_student_exists(student_id):
        return
    user_data = load_json(DataFiles.USERS_FILE.value)
    user_data['user_student'][str(user_id)] = str(student_id)
    save_json(user_data, DataFiles.USERS_FILE.value)


def delete_student_id(user_id: int) -> int | None:
    """
    –£–¥–∞–ª—è–µ—Ç –ø–∞—Ä—É user_id: student_id –≤ —Ñ–∞–π–ª–µ users.json

    :param user_id:
    :return:
    """
    user_data = load_json(DataFiles.USERS_FILE.value)
    if str(user_id) not in user_data['user_student'].keys():
        return None
    student_id = user_data['user_student'].pop(str(user_id))
    save_json(user_data, DataFiles.USERS_FILE.value)
    return student_id


def add_new_user(user_id: int) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª users.json

    :param user_id:
    :return:
    """
    user_data = load_json(DataFiles.USERS_FILE.value)
    if user_id not in user_data['users']:
        user_data['users'].append(user_id)
        save_json(user_data, DataFiles.USERS_FILE.value)


def check_if_student_exists(student_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Å—Ç—É–¥–µ–Ω—Ç –≤–æ–æ–±—â–µ

    :param student_id:
    :return:
    """
    data = load_json(DataFiles.STUDENTS_FILE.value)
    return str(student_id) in list(data.keys())


def check_if_registered(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    :param user_id:
    :return:
    """
    data = load_json(DataFiles.USERS_FILE.value)
    return str(user_id) in list(data['user_student'].keys())


def get_student_marks_by_user_id(user_id: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è Telegram (HTML-—Ä–∞–∑–º–µ—Ç–∫–∞)

    :param user_id: Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
    :return: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ string
    """
    student_id = load_json(DataFiles.USERS_FILE.value)['user_student'][str(user_id)]
    student_marks = load_json(DataFiles.STUDENTS_FILE.value)[student_id]

    result_lines = ['<b>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:</b>']
    for subject, mark in student_marks.items():
        display_mark = ''
        if subject == '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ':
            continue

        is_starred = '*' in str(mark)
        mark_clean = str(mark).replace('*', '').replace('/', '').rstrip()

        if isinstance(mark, str) and mark_clean.lower() in ['–Ω–µ–∑–∞—á', '–Ω–µ–∑–∞—á–µ—Ç', '–Ω–µ –∑–∞—á—Ç–µ–Ω–æ', '–Ω–µ–∞—Ç—Ç', '–Ω–µ–∞—Ç—Ç.',
                                                            '–Ω–µ –∞—Ç—Ç']:
            display_mark = '‚ùå'
        elif isinstance(mark, str) and mark_clean.lower() in ['–∑–∞—á', '–∑–∞—á—Ç–µ–Ω–æ', '–∞—Ç—Ç', '–∞—Ç—Ç.', '–∞—Ç', '–∞—Ç.']:
            display_mark = '‚úÖ'
        elif isinstance(mark, str) and mark_clean.lower() in ['–Ω–µ—è–≤', '–Ω–µ—è–≤–∫–∞', '–Ω/–∞', '–Ω–∞']:
            display_mark = '–Ω'
        elif mark_clean.isdigit():
            display_mark = mark_clean
        elif display_mark == '':
            display_mark = mark_clean

        display_mark += '*' if is_starred else ''

        # –ö–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ <code>
        result_lines.append(f'<code>{subject[:28]:28}: {display_mark}</code>')

    note = student_marks.get('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ', '').strip() if type(student_marks.get('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ', '')) == str else ''
    if note:
        result_lines.append(f'\n<b>üìå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> <i>{note}</i>')

    return '\n'.join(result_lines)


def get_users():
    data = load_json(DataFiles.USERS_FILE.value)
    return data['users']


def get_schedule_groups(filename: str = DataFiles.GROUPS.value) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≥—Ä—É–ø–ø

    Args:
        filename (str, optional): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º. Defaults to DataFiles.GROUPS.value.

    Returns:
        list: –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    """
    groups = []
    file = load_json(filename)
    for group in file:
        groups.append(group['group_name'])
    return groups


def get_schedule_classrooms(filename: str = DataFiles.CLASSROOMS.value) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–π

    Args:
        filename (str, optional): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏—è–º. Defaults to DataFiles.CLASSROOMS.value.

    Returns:
        list: –°–ø–∏—Å–æ–∫ –∞—É–¥–∏—Ç–æ—Ä–∏–π
    """
    classrooms = []
    file = load_json(filename)
    for classroom in file:
        classrooms.append(classroom['classroom'])
    return classrooms


def get_schedule_professors(filename: str = DataFiles.PROFESSORS.value) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π

    Args:
        filename (str, optional): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º. Defaults to DataFiles.PROFESSORS.value.

    Returns:
        list: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    """
    professors = []
    file = load_json(filename)
    for professor in file:
        professors.append(professor['professor'])
    return professors


def format_schedule(schedule_obj: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

    Args:
        schedule_obj (dict): –û–±—ä–µ–∫—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≥—Ä—É–ø–ø–µ, –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é

    Returns:
        str: –ù–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    """
    result = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –¥–Ω—é –Ω–µ–¥–µ–ª–∏
    for day_info in schedule_obj['subjects']:
        day = day_info['day']
        subjects = day_info['subjects']

        result.append(f"{day.capitalize()}:\n")

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        table = []
        current_class = None

        for subject in subjects:
            class_num = subject['class']
            subject_name = subject['subject'].strip().replace('\n', ' ')
            numerator = subject['numerator']
            denominator = subject['denominator']
            common = subject['common']

            if common:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –æ–±—â–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü—É
                table.append(f"{class_num}: {subject_name}")
            elif numerator:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –∏–¥–µ—Ç –ø–æ —á–∏—Å–ª–∏—Ç–µ–ª—é
                if current_class == class_num:
                    table[-1] += f" / {subject_name} (—á–∏—Å–ª–∏—Ç–µ–ª—å)"
                else:
                    table.append(f"{class_num}: {subject_name} (—á–∏—Å–ª–∏—Ç–µ–ª—å)")
                current_class = class_num
            elif denominator:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –∏–¥–µ—Ç –ø–æ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é
                if current_class == class_num:
                    table[-1] += f" / {subject_name} (–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å)"
                else:
                    table.append(f"{class_num}: {subject_name} (–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å)")
                current_class = class_num

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result.append("\n".join(table) + "\n")

    return "\n".join(result)


def get_formatted_output(filename: Literal[DataFiles.GROUPS, DataFiles.CLASSROOMS, DataFiles.PROFESSORS],
                         search_str: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

    Args:
        filename: –¢–∏–ø —Ñ–∞–π–ª–∞ (–≥—Ä—É–ø–ø—ã, –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏)
        search_str (str): –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞

    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    """
    file = load_json(filename.value)
    if filename == DataFiles.GROUPS:
        group_name = search_str
        group_obj = next((obj for obj in file if obj.get('group_name') == group_name), None)
        if group_obj is None:
            return "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        schedule = format_schedule(group_obj)
        return f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {group_name}\n\n" + schedule
    elif filename == DataFiles.CLASSROOMS:
        classroom_name = search_str
        classroom_obj = next((obj for obj in file if obj.get('classroom') == search_str), None)
        if classroom_obj is None:
            return "–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        schedule = format_schedule(classroom_obj)
        description = classroom_obj['description']
        return f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {classroom_name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n" + schedule
    elif filename == DataFiles.PROFESSORS:
        professor_name = search_str
        professor_obj = next((obj for obj in file if obj.get('professor') == search_str), None)
        if professor_obj is None:
            return "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        schedule = format_schedule(professor_obj)
        return f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {professor_name}\n\n" + schedule
    else:
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
